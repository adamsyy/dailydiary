import 'dart:convert';

import 'package:dailydiary/baseclient.dart';
import 'package:dailydiary/model.dart';
import 'package:flutter/material.dart';
import 'package:flutter_tindercard/flutter_tindercard.dart';
import 'package:http/http.dart';
import 'details.dart';
import 'api_manager.dart';
var i=0;

final url = 'https://recipesapi.herokuapp.com/api/v2/categories';


CardController controller=new CardController();


class Home1 extends StatefulWidget {

  @override
  _Home1State createState() => _Home1State();
}

class _Home1State extends State<Home1> {


late Future<Autogenerated> _newsModel;
@override
  void initState() {
    // TODO: implement initState
    super.initState();
    _newsModel = API_Manager().getNews();
  }

  @override
  Widget build(BuildContext context) {

    return Scaffold(
    body: FutureBuilder<Autogenerated>(
      future: _newsModel,builder: (context, snapshot){
      if(snapshot.hasData){
        Future.delayed(Duration(seconds:3));
        print('/////////////////');
       print(snapshot.data!.categories.length);
        return TinderSwapCard(
swipeUp: true,
swipeDown: true,
orientation: AmassOrientation.RIGHT,
totalNum: snapshot.data!.categories.length,
stackNum: 10,
swipeEdge: 1.0,
maxWidth: MediaQuery.of(context).size.width * 0.9,
maxHeight: MediaQuery.of(context).size.width * 0.9,
minWidth: MediaQuery.of(context).size.width * 0.8,
minHeight: MediaQuery.of(context).size.width * 0.8,
cardBuilder: (context, index) => Card(
child: SingleChildScrollView(scrollDirection: Axis.vertical,
  child:   Column(crossAxisAlignment: CrossAxisAlignment.start,

  children:[  Center(child: Image.network(snapshot.data!.categories[index].imageUrl)),



  Text(snapshot.data!.categories[index].title,style: TextStyle(fontSize: 27,fontWeight: FontWeight.w900),),



  ]),
),
),
cardController: controller = CardController(),
swipeUpdateCallback: (DragUpdateDetails details, Alignment align) {
/// Get swiping card's alignment
if (align.x < 0) {
print('lefttt');
if(i==7){i=0;}
} else if (align.x > 0) {
print('right');
if(i==7){i=0;}
}
},
swipeCompleteCallback:
(CardSwipeOrientation orientation, int index) {
/// Get orientation & index of swiped card!
},
);

      }
      return Center(child: CircularProgressIndicator( strokeWidth: 20,));
    },
    ),








      floatingActionButton: FloatingActionButton(
        child: Text('api'),onPressed: (){
         setState(() {

         });
      },
      ),
    );
  }
}

//
// TinderSwapCard(
// swipeUp: true,
// swipeDown: true,
// orientation: AmassOrientation.RIGHT,
// totalNum: userdetails.length,
// stackNum: 10,
// swipeEdge: 1.0,
// maxWidth: MediaQuery.of(context).size.width * 0.9,
// maxHeight: MediaQuery.of(context).size.width * 0.9,
// minWidth: MediaQuery.of(context).size.width * 0.8,
// minHeight: MediaQuery.of(context).size.width * 0.8,
// cardBuilder: (context, index) => Card(
// child: Column(crossAxisAlignment: CrossAxisAlignment.start,
// children:[  Center(child: Image.network('${userdetails[index].image}')),
// SizedBox(height: 20,),
// Text('${userdetails[index].name}',style: TextStyle(fontSize: 27,fontWeight: FontWeight.w900),),
// Padding(
// padding: const EdgeInsets.only(left: 6),
// child: Text('${userdetails[index].price}',style: TextStyle(fontSize: 13,fontWeight: FontWeight.w400),),
// )
// ]),
// ),
// cardController: controller = CardController(),
// swipeUpdateCallback: (DragUpdateDetails details, Alignment align) {
// /// Get swiping card's alignment
// if (align.x < 0) {
// print('lefttt');
// } else if (align.x > 0) {
// print('right');
// }
// },
// swipeCompleteCallback:
// (CardSwipeOrientation orientation, int index) {
// /// Get orientation & index of swiped card!
// },
// ),



//_postsjson["categories"][i+1]["title"]}  \n Body: ${_postsjson["categories"][1]["title"]}\n\n"